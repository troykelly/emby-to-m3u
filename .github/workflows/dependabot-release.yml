name: Approve Dependabot PRs and Create Release

on:
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write

jobs:
  condition-check:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check_condition.outputs.should_run }}
    
    steps:
    - name: Set condition output
      id: check_condition
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "pull_request_target" ]] && { [[ "${{ github.actor }}" == "dependabot[bot]" ]] || [[ "${{ github.actor }}" == "dependabot-preview[bot]" ]]; }; then
          echo "should_run=true" >> $GITHUB_OUTPUT
        else
          echo "should_run=false" >> $GITHUB_OUTPUT

  approve-dependabot-pr:
    needs: condition-check
    if: ${{ needs.condition-check.outputs.should_run == 'true' }}
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Approve Dependabot PR
      env:
        GH_TOKEN: ${{ secrets.PAM_REPO }}
      run: |
        gh pr review ${{ github.event.pull_request.number }} --approve

  create-release:
    needs: [condition-check, approve-dependabot-pr]
    if: ${{ needs.condition-check.outputs.should_run == 'true' }}
    runs-on: ubuntu-latest
    
    outputs:
      new_version: ${{ steps.get_latest_version.outputs.new_version }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get the latest release version
      id: get_latest_version
      run: |
        latest_release=$(gh release view --json tagName --jq .tagName || echo "v0.0.0")
        echo "Latest release version: $latest_release"
        IFS='.' read -r major minor patch <<< "${latest_release#v}"
        new_patch=$((patch+1))
        new_version="v${major}.${minor}.${new_patch}"
        echo "new_version=$new_version" >> $GITHUB_OUTPUT
      
    - name: Create draft release
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.PAM_REPO }}
      run: |
        gh release create ${{ steps.get_latest_version.outputs.new_version }} -d -t "Release ${{ steps.get_latest_version.outputs.new_version }}" -n "Automated release by GitHub Actions"

  approve-release:
    needs: [condition-check, create-release]
    if: ${{ needs.condition-check.outputs.should_run == 'true' }}
    runs-on: ubuntu-latest

    steps:
    - name: Publish draft release
      env:
        GITHUB_TOKEN: ${{ secrets.PAM_REPO }}
      run: |
        gh release edit ${{ needs.create-release.outputs.new_version }} --draft=false